import { SettingsManager } from "./SettingsManager.js";
import { Player } from "./Player.js";
import { Obstacle } from "./Obstacle.js";
import { Collectible } from "./Collectible.js";
import { Resource } from "./Resource.js";
import { Inventory } from "./Inventory.js";
import { Enemy } from "./Enemy.js";
import { getRandomDivisibleBy20 } from "../utils/utils.js";

export class Game {
  constructor() {
    this.canvas = document.getElementById("game-canvas");
    this.ctx = this.canvas.getContext("2d");
    this.gameWidth = 600;
    this.gameHeight = 600;
    this.gridSize = 20;

    this.canvas.width = this.gameWidth;
    this.canvas.height = this.gameHeight;

    this.player = new Player(
      0,
      0,
      20,
      10,
      "blue",
      this.gameWidth,
      this.gameHeight
    );
    this.obstacles = [
      new Obstacle(100, 100, 20, 20),
      new Obstacle(200, 200, 20, 20),
      new Obstacle(300, 300, 20, 20),
    ];
    this.collectibles = [
      new Collectible(40, 40, 20, 20),
      new Collectible(120, 120, 20, 20),
    ];
    this.resources = [
      new Resource(160, 160, 20, 20, "food", 20),
      new Resource(260, 260, 20, 20, "water", 10),
    ];
    this.enemies = [new Enemy(400, 400, 20, 20, "black")];
    this.level = 1;
    this.gameLoop();

    // Starte die Spielschleife beim Erstellen des Spielobjekts
    this.settingsManager = new SettingsManager();
    
    this.init();
  }
  init() {
    this.inventory = new Inventory();
    document.addEventListener("keydown", (event) => this.handleKeydown(event));
    this.canvas.addEventListener("click", (event) =>
      this.handleCanvasClick(event)
    );

    document.getElementById("cheat-energy").addEventListener("click", () => {
      this.player.regenerateEnergy(100); // Gibt dem Spieler 100 Energiepunkte
    });
    setInterval(() => this.updateEnergy(), 333);
    this.draw();
  }
  gameLoop() {
    requestAnimationFrame(() => this.gameLoop()); // Registriere den nächsten Frame
    this.updateGame(); // Aktualisiere den Spielzustand
    this.draw(); // Zeichne die Spielszene neu
  }
  updateGame() {
    // Führe Aktualisierungen für Spieler, Gegner usw. durch
    this.player.updatePosition();
    this.checkCollisions();
    this.checkEnemyCollisions();
    this.checkCollections();
    this.checkResourceCollections();
    // Überprüfe Kollisionen, sammle Ressourcen usw.
  }
  
  handleCanvasClick(event) {
    const rect = this.canvas.getBoundingClientRect();
    const clickX = event.clientX - rect.left;
    const clickY = event.clientY - rect.top;
    const dx = clickX - this.player.x;
    const dy = clickY - this.player.y;
    const distance = Math.sqrt(dx * dx + dy * dy);

    if (distance <= Math.floor(this.player.energy / 3) * this.gridSize) {
      const stepX = Math.floor(dx / this.gridSize) * this.gridSize;
      const stepY = Math.floor(dy / this.gridSize) * this.gridSize;
      this.player.move(stepX, stepY, 3);
      this.draw();
    }
  }
  handleKeydown(event) {
    // console.log(event);
    const step = 20;
    const moveKeys = {
      w: [0, -step],
      s: [0, step],
      a: [-step, 0],
      d: [step, 0],
      ArrowUp: [0, -step],
      ArrowDown: [0, step],
      ArrowLeft: [-step, 0],
      ArrowRight: [step, 0],
    };

    if (moveKeys[event.key]) {
      this.player.move(...moveKeys[event.key], 3);
      event.preventDefault();
      this.draw();
    } else if (event.key === " ") {
      // Space key to attack
      this.player.attack(this.enemies);
      event.preventDefault();
    }
  }
  updateEnergy() {
    this.player.regenerateEnergy(1);
    this.draw();
  }
  draw() {
    this.ctx.clearRect(0, 0, this.gameWidth, this.gameHeight);
    this.drawGrid();
    this.player.draw(this.ctx);
    this.player.drawEnergy(this.ctx);
    this.player.drawScore(this.ctx);
    this.obstacles.forEach((obstacle) => obstacle.draw(this.ctx));
    this.collectibles.forEach((collectible) => collectible.draw(this.ctx));
    this.resources.forEach((resource) => resource.draw(this.ctx));
    this.enemies.forEach((enemy) => enemy.draw(this.ctx));
  }
  drawGrid() {
    this.ctx.strokeStyle = "#ddd";
    let dynamicGridSize = Math.ceil(Math.min(this.gameWidth, this.gameHeight) / 30); // Beispiel einer dynamischen Grid-Berechnung

    for (let x = 0; x <= this.gameWidth; x += dynamicGridSize) {
      this.ctx.beginPath();
      this.ctx.moveTo(x, 0);
      this.ctx.lineTo(x, this.gameHeight);
      this.ctx.stroke();
    }

    for (let y = 0; y <= this.gameHeight; y += dynamicGridSize) {
      this.ctx.beginPath();
      this.ctx.moveTo(0, y);
      this.ctx.lineTo(this.gameWidth, y);
      this.ctx.stroke();
    }
  }

  checkCollisions() {
    this.obstacles.forEach((obstacle) => {
      if (this.player.detectCollision(obstacle)) {
        alert("Game Over!");
        this.player.targetX = 0;
        this.player.targetY = 0;
      }
    });
  }
  checkCollections() {
    // console.log(`Anzahl der Collectibles vor der Prüfung: ${this.collectibles.length}`);
    this.collectibles.forEach((collectible, index) => {
      if (this.player.detectCollision(collectible)) {
        this.player.increaseScore(50);
        console.log(`Collectible bei Index ${index} gesammelt`);
        this.collectibles.splice(index, 1); // Entferne das gesammelte Item
      }
    });
    // console.log(`Anzahl der Collectibles nach der Prüfung: ${this.collectibles.length}`);
  }

  checkResourceCollections() {
    this.resources.forEach((resource, index) => {
      if (this.player.detectCollision(resource)) {
        this.inventory.addItem(resource);
        this.resources.splice(index, 1); // Entferne die gesammelte Ressource
        this.inventory.displayInventory();
      }
    });

    // Sicherstellen, dass genug Ressourcen da sind, bevor ein Levelaufstieg erfolgt
    if (this.resources.length === 0) {
      this.nextLevel();
    }
  }
  checkEnemyCollisions() {
    this.enemies.forEach((enemy) => {
      if (this.player.detectCollision(enemy)) {
        enemy.attack(this.player);
      }
    });
  }
  nextLevel() {
    this.level += 1;
    document.getElementById("level").innerHTML = "<i class='fas fa-medal'></i> " + this.level;
    // this.player.x = 0;
    // this.player.y = 0;
    this.obstacles.push(
      new Obstacle(
        getRandomDivisibleBy20(this.gameWidth),
        getRandomDivisibleBy20(this.gameHeight),
        20,
        20
      )
    );
    this.resources.push(
      new Resource(
        getRandomDivisibleBy20(this.gameWidth),
        getRandomDivisibleBy20(this.gameHeight),
        20,
        20,
        "food",
        20
      )
    );
    this.resources.push(
      new Resource(
        getRandomDivisibleBy20(this.gameWidth),
        getRandomDivisibleBy20(this.gameHeight),
        20,
        20,
        "water",
        10
      )
    );
  }
  useResource(resourceType) {
    const resource = this.inventory.items.find(
      (item) => item.type === resourceType
    );
    if (resource) {
      this.player.regenerateEnergy(resource.energy);
      this.inventory.removeItem(resource);
      this.inventory.displayInventory();
    }
  }
}
